name: Release Build

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: read

env:
  GO_VERSION: '1.21'

jobs:
  run-tests:
    name: Run Python Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib libc6-dev

      - name: Download Go modules
        run: make deps

      - name: Get version from Makefile
        id: version
        run: |
          VERSION=$(make -s -f Makefile print-version || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Run Python tests
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: make test

  build-native-mac:
    name: Build Native (macOS)
    runs-on: macos-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Go modules
        run: make deps

      - name: Get version from Makefile
        id: version
        run: |
          VERSION=$(make -s -f Makefile print-version || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build native macOS
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          make build-lib-mac VERSION=$VERSION

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sqcache-mac-native-${{ steps.version.outputs.version }}
          path: build/mac/
          retention-days: 30

  build-native-linux:
    name: Build Native (Linux)  
    runs-on: ubuntu-24.04  # Use latest Ubuntu with Zig CC for musl builds
    needs: run-tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Zig and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xz-utils
          
          # Install Zig
          wget -q https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz
          tar -xf zig-linux-x86_64-0.13.0.tar.xz
          sudo mv zig-linux-x86_64-0.13.0 /opt/zig
          sudo ln -sf /opt/zig/zig /usr/local/bin/zig
          
          # Verify installation
          zig version

      - name: Download Go modules
        run: make deps

      - name: Get version from Makefile
        id: version
        run: |
          VERSION=$(make -s -f Makefile print-version || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build native Linux
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Build command-line binary with Zig CC and musl (no GLIBC dependency)
          make build-linux-musl VERSION=$VERSION
          
          # Build shared library with Zig CC and musl (no GLIBC dependency)
          make build-lib-linux-musl VERSION=$VERSION
          
          # Verify the build produces static binaries with no GLIBC dependency
          echo "Checking binary dependencies:"
          ldd build/linux/sqcache || echo "Static binary - no dependencies (expected)"
          ldd build/linux/sqcachelib.$VERSION.so || echo "Static library - no dependencies (expected)"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: sqcache-linux-native-${{ steps.version.outputs.version }}
          path: build/linux/
          retention-days: 30

  build-lambda:
    name: Build Lambda (Amazon Linux 2)
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Go modules
        run: make deps

      - name: Get version from Makefile
        id: version
        run: |
          VERSION=$(make -s -f Makefile print-version || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Lambda (x86_64)
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          make build-lib-lambda VERSION=$VERSION

      - name: Build Lambda (ARM64)
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          make build-lib-lambda-arm64 VERSION=$VERSION

      - name: Verify Lambda builds
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Checking Lambda x86_64 build:"
          file build/lambda/sqcachelib.$VERSION.so
          echo "Checking Lambda ARM64 build:"
          file build/lambda/sqcachelib.$VERSION.arm64.so

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sqcache-lambda-${{ steps.version.outputs.version }}
          path: build/lambda/
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-native-mac, build-native-linux, build-lambda]

    steps:
      - uses: actions/checkout@v4

      - name: Get version from Makefile
        id: version
        run: |
          VERSION=$(make -s -f Makefile print-version || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Check if release already exists
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "Error: Tag v${{ steps.version.outputs.version }} already exists"
            echo "Please update the version in the Makefile before creating a release"
            exit 1
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@de96f4613b77ec03b5cf633e7c350c32bd3c5660

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Package macOS assets
          if [ -d "sqcache-mac-native-${{ steps.version.outputs.version }}" ]; then
            cd "sqcache-mac-native-${{ steps.version.outputs.version }}"
            tar -czf "../release-assets/sqcache-mac-${{ steps.version.outputs.version }}.tar.gz" *
            cd ..
          fi
          
          # Package Linux assets
          if [ -d "sqcache-linux-native-${{ steps.version.outputs.version }}" ]; then
            cd "sqcache-linux-native-${{ steps.version.outputs.version }}"
            tar -czf "../release-assets/sqcache-linux-${{ steps.version.outputs.version }}.tar.gz" *
            cd ..
          fi
          
          # Package Lambda assets
          if [ -d "sqcache-lambda-${{ steps.version.outputs.version }}" ]; then
            cd "sqcache-lambda-${{ steps.version.outputs.version }}"
            tar -czf "../release-assets/sqcache-lambda-${{ steps.version.outputs.version }}.tar.gz" *
            cd ..
          fi
          
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@126b1e70939461ae1dc0252ce412cabf99778520
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-assets/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}